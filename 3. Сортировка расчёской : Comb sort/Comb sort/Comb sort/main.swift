//
//  main.swift
//  Comb sort
//
//  Created by Ilyas Tyumenev on 26.06.2022.
//

/*
 Сортировка расчёской / Comb sort
 
 Сортировка расчёской - еще одна разновидность сортировки пузырьком. Данная сортировка улучшает сортировку пузырьком за
 счет устранения маленьких значений в конце списка (черепах).

 Достигается это тем, что вместо сравнения соседних элементов, сравниваются элементы на достаточно большом расстоянии
 друг от друга, постепенно уменьшая это расстояние. Сначала разрыв между элементами берётся максимальный, т.е. на
 единицу меньше, чем размер массива. Затем на каждой итерации расстояние уменьшается путём деления расстояния на фактор
 уменьшения. Так продолжается до тех пор, пока разность индексов сравниваемых элементов не достигнет единицы. Тогда
 сравниваются уже соседние элементы как и в сортировке пузырьком, но эта итерация будет последней.

 Оптимальное значение фактора уменьшения - 1,247.
 
 Сложность      Лучшее          Среднее                                     Худшее
 Время          O(n log n)      O(n^2/2p), где p - количество инкрементов   O(n^2)
 Память                                                                     O(1)
 
 Ввод:   10 9 7 101 23
 Вывод:  7 9 10 23 101
 */
import Foundation

print("Можно вводить данные")

let intArray = readLine()!.split(separator: " ").compactMap { Int($0) }

func combSort(array: [Int]) -> [Int] {
    var a = array
    var gap = a.count
    
    if gap <= 1 {       // если массив <= 1, то он считается отсортированным
        return a
    }
    
    var swaps = false
    while (gap > 1 || swaps == true) {
        gap = Int(Double(gap) / 1.247331)
        if gap < 1 {
            gap = 1
        }
        var i = 0
        swaps = false
        while i + gap < a.count {
            if a[i] > a[i + gap] {
                (a[i], a[i + gap]) = (a[i + gap], a[i])
                swaps = true
            }
            i += 1
        }
    }
    return a
}

print(combSort(array: intArray))
